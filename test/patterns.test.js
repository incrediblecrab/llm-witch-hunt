const { AI_PATTERNS, LLM_APIS, FILE_EXTENSIONS_TO_SCAN } = require('../src/patterns');

describe('Patterns', () => {
  describe('AI_PATTERNS', () => {
    it('should have all required pattern categories', () => {
      expect(AI_PATTERNS).toHaveProperty('comments');
      expect(AI_PATTERNS).toHaveProperty('authors');
      expect(AI_PATTERNS).toHaveProperty('variables');
      expect(AI_PATTERNS).toHaveProperty('imports');
    });

    it('should match AI-related comments', () => {
      const testCases = [
        '// AI-generated code',
        '/* Generated by ChatGPT */',
        '// Created by Claude',
        '# @ai-assisted function',
        '// This was generated by GPT-4'
      ];

      testCases.forEach(testCase => {
        const matched = AI_PATTERNS.comments.some(pattern => pattern.test(testCase));
        expect(matched).toBe(true);
      });
    });

    it('should match AI-related variable names', () => {
      const testCases = [
        'const aiResponse = data;',
        'let llmOutput = "";',
        'var gptResult = null;',
        'let promptTemplate = "";'
      ];

      testCases.forEach(testCase => {
        const matched = AI_PATTERNS.variables.some(pattern => pattern.test(testCase));
        expect(matched).toBe(true);
      });
    });
  });

  describe('LLM_APIS', () => {
    it('should have major LLM providers', () => {
      expect(LLM_APIS).toHaveProperty('openai');
      expect(LLM_APIS).toHaveProperty('anthropic');
      expect(LLM_APIS).toHaveProperty('google');
      expect(LLM_APIS).toHaveProperty('cohere');
      expect(LLM_APIS).toHaveProperty('huggingface');
    });

    it('should match OpenAI API calls', () => {
      const testCases = [
        'https://api.openai.com/v1/completions',
        'openai.createCompletion()',
        'await openai.createChatCompletion()'
      ];

      testCases.forEach(testCase => {
        const matched = LLM_APIS.openai.patterns.some(pattern => pattern.test(testCase));
        expect(matched).toBe(true);
      });
    });
  });

  describe('FILE_EXTENSIONS_TO_SCAN', () => {
    it('should include common programming language extensions', () => {
      const expectedExtensions = ['.js', '.py', '.java', '.ts', '.cpp'];
      expectedExtensions.forEach(ext => {
        expect(FILE_EXTENSIONS_TO_SCAN).toContain(ext);
      });
    });
  });
});